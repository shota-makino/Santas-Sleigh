model "SantasSledges Master Clustering"

uses "mmjobs", "mmsheet", "mmsystem"

parameters
  NUMPAR=1
  NUMCLUSTERS=77                   ! Added 1 to account for first clustering
  SUBTIME=100
end-parameters

forall( n in 1..NUMCLUSTERS ) do
  removefiles(SYS_RECURS,string(n),"*")
  removedir(string(n))
end-do

declarations
  RM = 1..NUMPAR                   ! Model indices
  JOBS = 1..NUMCLUSTERS            ! Job (instance) indices
  modPar: array(RM) of Model       ! Models
  jobid: array(set of integer) of integer  ! Job index for model UIDs
  JobList: list of integer         ! List of jobs
  JobsRun: set of integer          ! Set of finished jobs
  JobSize: integer                 ! Number of jobs to be executed
  Msg: Event                       ! Messages sent by models
end-declarations

load(modPar(1),"SantasSledges_Cluster.bim")
modPar(1).uid:=1
run(modPar(1),"NUMCLUSTERS="+NUMCLUSTERS)
wait
Msg:=getnextevent
while(Msg.class<>EVENT_END) do
  wait
  Msg := getnextevent
end-do
unload(modPar(1))

forall(m in RM) do
  load(modPar(m), "SantasSledges_SubCluster.bim")  ! Load the bim file
  modPar(m).uid:= m                ! Store the model ID
end-do

JobList:= sum(i in JOBS) [i]       ! Define the list of jobs (instances)
JobSize:= JobList.size             ! Store the number of jobs
JobsRun:= {}                       ! Set of terminated jobs is empty

!*************************************************************************
procedure start_next_job(submod: Model)
  i:=getfirst(JobList)               ! Retrieve first job in the list
  cuthead(JobList,1)                 ! Remove first entry from job list
  jobid(submod.uid):= i              ! Save job index for this model
  writeln("Start job ", i, " (model ", submod.uid, ")")
  run(submod, "CLUSTER="+i)
end-procedure

!**** Start initial lot of model runs ****
forall(m in RM)
  if JobList<>[] then
    start_next_job(modPar(m))
  end-if

!**** Run all remaining jobs ****
while (JobsRun.size<JobSize) do
  wait                               ! Wait for model termination
! Start next job
  Msg:= getnextevent
  if Msg.class=EVENT_END then        ! We are only interested in "end" events
    m:= Msg.fromuid                  ! Retrieve the model ID
    JobsRun+={jobid(m)}              ! Keep track of job termination
    writeln("End of job ", jobid(m), " (model ", m, ")")
    if JobList<>[] then              ! Start a new run if queue not empty
      start_next_job(modPar(m))
    end-if
  end-if
end-do

end-model
